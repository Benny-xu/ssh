<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		                   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		                   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		                   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- 启用spring注解支持 -->
    <context:annotation-config/>

    <!-- 读取数据库的properties文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:db.properties"/>
<!--         <property name="locations"> -->
<!--         	<list> -->
<!--         		<value>classpath:db.properties</value> -->
<!--         	</list> -->
<!--         </property> -->
    </bean>

    <!-- 配数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 配置Hibernate的SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop><!-- 生产环境注释掉这句 -->
                <prop key="default_schema">attendance</prop>
                <!-- <prop key="hibernate.current_session_context_class">thread</prop> -->
            </props>
        </property>
        <!-- 配置扫描注解实体的包 -->
<!--         <property name="packagesToScan" value="com.demo.*.entity"> -->
<!--             <list> -->
<!--                 <value>com.demo.entity</value> -->
<!--             </list> -->
<!--         </property> -->
        <!-- hibernate 3可以使用这种方式，spring对Hibernate4做了改变，这里不能使用了-->
        <property name="configLocations">
        	<value>classpath:hibernate.cfg.xml</value>
        </property>
    </bean>


    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 配置事务的传播特性 -->
    <!-- 配置哪些类哪些方法使用哪种事务传播特性 -->
    <tx:advice id="txadvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
        </tx:attributes>
    </tx:advice>

    <!-- 配置Aop的切入位置 -->
    <aop:config>
        <!-- 对业务逻辑层实施事务 -->
        <aop:pointcut id="serviceMethod" expression="execution(* com.demo.*.service.*.*(..))"/>
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txadvice"/>
    </aop:config>

    <!--支持多个aop:config-->
<!--     <aop:config> -->
<!--         对公共业务逻辑层实施事务 -->
<!--         <aop:pointcut id="CommonServiceMethod" expression="execution(* com.demo.basic.service.*.*(..))"/> -->
<!--         <aop:advisor pointcut-ref="CommonServiceMethod" advice-ref="txadvice"/> -->
<!--     </aop:config> -->

    <!--配置根据注解，自动注入Log对象-->
<!--     <bean id="logBeanPocessor" class="com.demo.basic.annotation.LogBeanPostProcessor" lazy-init="false" /> -->

</beans>
